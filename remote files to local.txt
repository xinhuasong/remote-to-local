用名词的译名如下：

Workspace：工作区
Index / Stage：暂存区
Repository：仓库区（或本地仓库）
Remote：远程仓库

#git常用命令#

# 在当前目录新建一个Git代码库

$ git init# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]
$ git clone https://github.com/xinhuasong/remotetolocal.git (git://github.com/xinhuasong/remotetolocal.git)# 下载一个项目和它的整个代码历史
$ git add [file1] [file2] ... # 添加指定文件到暂存区
$ git add [dir]# 添加指定目录到暂存区，包括子目录
$ git add .# 添加当前目录的所有文件到暂存区
$ git rm [file1] [file2] ...# 删除工作区文件，并且将这次删除放入暂存区
$ git rm --cached [file]# 停止追踪指定文件，但该文件会保留在工作区
$ git mv [file-original] [file-renamed]# 改名文件，并且将这个改名放入暂存区
$ git commit -m [message] # 提交暂存区到仓库区
$ git branch# 列出所有本地分支
$ git branch -r# 列出所有远程分支
$ git branch -a# 列出所有本地分支和远程分支
$ git checkout -b [branch]# 新建一个分支，并切换到该分支
$ git checkout [branch-name]# 切换到指定分支，并更新工作区
$ git branch -d [branch-name]# 删除分支
$ git status# 显示有变更的文件
$ git log --pretty=oneline#使记录只显示主要的内容，一行显示
$ git log# 显示当前分支的版本历史
$ git log --stat# 显示commit历史，以及每次commit发生变更的文件
$ git log -S [keyword]# 搜索提交历史，根据关键词
$ git diff# 显示暂存区和工作区的差异
$ git diff HEAD# 显示两次提交之间的差异
$ git reset --hard HEAD^# 回退到上一个版本
$ git reset --hard HEAD^^# 回退到上上一个版本
$ git reset --hard HEAD~100# 回退到100个版本
$ git reflog# 获取历史版本号
$ git fetch [remote]# 下载远程仓库的所有变动
$ git remote -v# 显示所有远程仓库
$ git push origin master
#把该分支推送到远程库对应的远程分支上(第一次推送master分支时，git push -u origin master加上了 –u参数，Git会将本地的master分支内容推送的远程新的master分支，还会把2个master分支关联起来)
$ git remote add origin https://github.com/zwg481026/APITest.git# 将你本地的仓库和github仓库进行关联






#end
